// Code generated by protoc-gen-go. DO NOT EDIT.
// source: namesandcolors.proto

/*
Package namesandcolors is a generated protocol buffer package.

It is generated from these files:
	namesandcolors.proto

It has these top-level messages:
	Name
	Color
*/
package namesandcolors

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Empty from public import google/protobuf/empty.proto
type Empty google_protobuf.Empty

func (m *Empty) Reset()         { (*google_protobuf.Empty)(m).Reset() }
func (m *Empty) String() string { return (*google_protobuf.Empty)(m).String() }
func (*Empty) ProtoMessage()    {}

type Name struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Name) Reset()                    { *m = Name{} }
func (m *Name) String() string            { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()               {}
func (*Name) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Color struct {
	Color string `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
}

func (m *Color) Reset()                    { *m = Color{} }
func (m *Color) String() string            { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()               {}
func (*Color) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Color) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func init() {
	proto.RegisterType((*Name)(nil), "namesandcolors.Name")
	proto.RegisterType((*Color)(nil), "namesandcolors.Color")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NamesAndColors service

type NamesAndColorsClient interface {
	ListNames(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (NamesAndColors_ListNamesClient, error)
	TellColors(ctx context.Context, opts ...grpc.CallOption) (NamesAndColors_TellColorsClient, error)
}

type namesAndColorsClient struct {
	cc *grpc.ClientConn
}

func NewNamesAndColorsClient(cc *grpc.ClientConn) NamesAndColorsClient {
	return &namesAndColorsClient{cc}
}

func (c *namesAndColorsClient) ListNames(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (NamesAndColors_ListNamesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NamesAndColors_serviceDesc.Streams[0], c.cc, "/namesandcolors.NamesAndColors/ListNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &namesAndColorsListNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NamesAndColors_ListNamesClient interface {
	Recv() (*Name, error)
	grpc.ClientStream
}

type namesAndColorsListNamesClient struct {
	grpc.ClientStream
}

func (x *namesAndColorsListNamesClient) Recv() (*Name, error) {
	m := new(Name)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *namesAndColorsClient) TellColors(ctx context.Context, opts ...grpc.CallOption) (NamesAndColors_TellColorsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NamesAndColors_serviceDesc.Streams[1], c.cc, "/namesandcolors.NamesAndColors/TellColors", opts...)
	if err != nil {
		return nil, err
	}
	x := &namesAndColorsTellColorsClient{stream}
	return x, nil
}

type NamesAndColors_TellColorsClient interface {
	Send(*Color) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type namesAndColorsTellColorsClient struct {
	grpc.ClientStream
}

func (x *namesAndColorsTellColorsClient) Send(m *Color) error {
	return x.ClientStream.SendMsg(m)
}

func (x *namesAndColorsTellColorsClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NamesAndColors service

type NamesAndColorsServer interface {
	ListNames(*google_protobuf.Empty, NamesAndColors_ListNamesServer) error
	TellColors(NamesAndColors_TellColorsServer) error
}

func RegisterNamesAndColorsServer(s *grpc.Server, srv NamesAndColorsServer) {
	s.RegisterService(&_NamesAndColors_serviceDesc, srv)
}

func _NamesAndColors_ListNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamesAndColorsServer).ListNames(m, &namesAndColorsListNamesServer{stream})
}

type NamesAndColors_ListNamesServer interface {
	Send(*Name) error
	grpc.ServerStream
}

type namesAndColorsListNamesServer struct {
	grpc.ServerStream
}

func (x *namesAndColorsListNamesServer) Send(m *Name) error {
	return x.ServerStream.SendMsg(m)
}

func _NamesAndColors_TellColors_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NamesAndColorsServer).TellColors(&namesAndColorsTellColorsServer{stream})
}

type NamesAndColors_TellColorsServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*Color, error)
	grpc.ServerStream
}

type namesAndColorsTellColorsServer struct {
	grpc.ServerStream
}

func (x *namesAndColorsTellColorsServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *namesAndColorsTellColorsServer) Recv() (*Color, error) {
	m := new(Color)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NamesAndColors_serviceDesc = grpc.ServiceDesc{
	ServiceName: "namesandcolors.NamesAndColors",
	HandlerType: (*NamesAndColorsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNames",
			Handler:       _NamesAndColors_ListNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TellColors",
			Handler:       _NamesAndColors_TellColors_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "namesandcolors.proto",
}

func init() { proto.RegisterFile("namesandcolors.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4b, 0xcc, 0x4d,
	0x2d, 0x4e, 0xcc, 0x4b, 0x49, 0xce, 0xcf, 0xc9, 0x2f, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x43, 0x15, 0x95, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xcb, 0x26,
	0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x14, 0x2b, 0x49, 0x71, 0xb1, 0xf8, 0x25,
	0xe6, 0xa6, 0x0a, 0x09, 0x71, 0xb1, 0x80, 0xb4, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81,
	0xd9, 0x4a, 0xb2, 0x5c, 0xac, 0xce, 0x20, 0x23, 0x84, 0x44, 0xb8, 0x58, 0xc1, 0x66, 0x41, 0x65,
	0x21, 0x1c, 0xa3, 0x09, 0x8c, 0x5c, 0x7c, 0x20, 0xbd, 0xc5, 0x8e, 0x79, 0x29, 0x60, 0x75, 0xc5,
	0x42, 0xb6, 0x5c, 0x9c, 0x3e, 0x99, 0xc5, 0x25, 0x60, 0x51, 0x21, 0x31, 0x3d, 0x88, 0xc5, 0x7a,
	0x30, 0x8b, 0xf5, 0x5c, 0x41, 0x16, 0x4b, 0x89, 0xe8, 0xa1, 0x39, 0x1b, 0xa4, 0x5c, 0x89, 0xc1,
	0x80, 0x51, 0xc8, 0x9e, 0x8b, 0x2b, 0x24, 0x35, 0x27, 0x07, 0x6a, 0x98, 0x28, 0xba, 0x3a, 0xb0,
	0xb8, 0x14, 0x0e, 0x63, 0x95, 0x18, 0x34, 0x18, 0x03, 0x18, 0x92, 0xd8, 0xc0, 0xa2, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0x42, 0xc9, 0x97, 0x1b, 0x01, 0x00, 0x00,
}
